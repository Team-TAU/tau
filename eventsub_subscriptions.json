[
  {
    "subscription_type": "Channel Update",
    "name": "channel.update",
    "version": "1",
    "description": "A broadcaster updates their channel properties e.g., category, title, mature flag, broadcast, or language.",
    "scope_required": null,
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Update",
      "description": "A broadcaster updates their channel properties e.g., category, title, mature flag, broadcast, or language.",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcasters user ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The broadcasters user login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The broadcasters user display name.",
          "type": "string"
        },
        "title": {
          "description": "The channels stream title.",
          "type": "string"
        },
        "language": {
          "description": "The channels broadcast language.",
          "type": "string"
        },
        "category_id": {
          "description": "The channels category ID.",
          "type": "string"
        },
        "category_name": {
          "description": "The category name.",
          "type": "string"
        },
        "is_mature": {
          "description": "A boolean identifying whether the channel is flagged as mature. Valid values aretrueandfalse.",
          "type": "boolean"
        }
      },
      "required": [
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "title",
        "language",
        "category_id",
        "category_name",
        "is_mature"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Update request arguments",
      "description": "Required and optional query parameters for requesting a Channel Update event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID for the channel you want to get updates for.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Channel Follow",
    "name": "channel.follow",
    "version": "1",
    "description": "A specified channel receives a follow.",
    "scope_required": null,
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Follow",
      "description": "A specified channel receives a follow.",
      "type": "object",
      "properties": {
        "user_id": {
          "description": "The user ID for the user now following the specified channel.",
          "type": "string"
        },
        "user_login": {
          "description": "The user login for the user now following the specified channel.",
          "type": "string"
        },
        "user_name": {
          "description": "The user display name for the user now following the specified channel.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "The requested broadcaster ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The requested broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The requested broadcaster display name.",
          "type": "string"
        },
        "followed_at": {
          "description": "RFC3339 timestamp of when the follow occurred.",
          "type": "string"
        }
      },
      "required": [
        "user_id",
        "user_login",
        "user_name",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "followed_at"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Follow request arguments",
      "description": "Required and optional query parameters for requesting a Channel Follow event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID for the channel you want to get follow notifications for.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Channel Subscribe",
    "name": "channel.subscribe",
    "version": "1",
    "description": "A notification when a specified channel receives a subscriber. This does not include resubscribes.",
    "scope_required": "channel:read:subscriptions",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Subscribe",
      "description": "A notification when a specified channel receives a subscriber. This does not include resubscribes.",
      "type": "object",
      "properties": {
        "user_id": {
          "description": "The user ID for the user who subscribed to the specified channel.",
          "type": "string"
        },
        "user_login": {
          "description": "The user login for the user who subscribed to the specified channel.",
          "type": "string"
        },
        "user_name": {
          "description": "The user display name for the user who subscribed to the specified channel.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "The requested broadcaster ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The requested broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The requested broadcaster display name.",
          "type": "string"
        },
        "tier": {
          "description": "The tier of the subscription. Valid values are 1000, 2000, and 3000.",
          "type": "string"
        },
        "is_gift": {
          "description": "Whether the subscription is a gift.",
          "type": "boolean"
        }
      },
      "required": [
        "user_id",
        "user_login",
        "user_name",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "tier",
        "is_gift"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Subscribe request arguments",
      "description": "Required and optional query parameters for requesting a Channel Subscribe event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID for the channel you want to get subscribe notifications for.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Channel Subscription End",
    "name": "channel.subscription.end",
    "version": "1",
    "description": "A notification when a subscription to the specified channel ends.",
    "scope_required": "channel:read:subscriptions",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Subscription End",
      "description": "A notification when a subscription to the specified channel ends.",
      "type": "object",
      "properties": {
        "user_id": {
          "description": "The user ID for the user whose subscription ended.",
          "type": "string"
        },
        "user_login": {
          "description": "The user login for the user whose subscription ended.",
          "type": "string"
        },
        "user_name": {
          "description": "The user display name for the user whose subscription ended.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "The broadcaster user ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The broadcaster display name.",
          "type": "string"
        },
        "tier": {
          "description": "The tier of the subscription that ended. Valid values are 1000, 2000, and 3000.",
          "type": "string"
        },
        "is_gift": {
          "description": "Whether the subscription was a gift.",
          "type": "boolean"
        }
      },
      "required": [
        "user_id",
        "user_login",
        "user_name",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "tier",
        "is_gift"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Subscription End request arguments",
      "description": "Required and optional query parameters for requesting a Channel Subscription End event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID for the channel you want to get subscription end notifications for.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Channel Subscription Gift",
    "name": "channel.subscription.gift",
    "version": "1",
    "description": "A notification when a viewer gives a gift subscription to one or more users in the specified channel.",
    "scope_required": "channel:read:subscriptions",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Subscription Gift",
      "description": "A notification when a viewer gives a gift subscription to one or more users in the specified channel.",
      "type": "object",
      "properties": {
        "user_id": {
          "description": "The user ID of the user who sent the subscription gift. Set to null if it was an anonymous subscription gift.",
          "type": "string"
        },
        "user_login": {
          "description": "The user login of the user who sent the gift. Set to null if it was an anonymous subscription gift.",
          "type": "string"
        },
        "user_name": {
          "description": "The user display name of the user who sent the gift. Set to null if it was an anonymous subscription gift.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "The broadcaster user ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The broadcaster display name.",
          "type": "string"
        },
        "total": {
          "description": "The number of subscriptions in the subscription gift.",
          "type": "integer"
        },
        "tier": {
          "description": "The tier of subscriptions in the subscription gift.",
          "type": "string"
        },
        "cumulative_total": {
          "description": "The number of subscriptions gifted by this user in the channel. This value is null for anonymous gifts or if the gifter has opted out of sharing this information.",
          "type": "integer"
        },
        "is_anonymous": {
          "description": "Whether the subscription gift was anonymous.",
          "type": "boolean"
        }
      },
      "required": [
        "user_id",
        "user_login",
        "user_name",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "total",
        "tier",
        "cumulative_total",
        "is_anonymous"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Subscription Gift request arguments",
      "description": "Required and optional query parameters for requesting a Channel Subscription Gift event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID for the channel you want to get subscription gift notifications for.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Channel Subscription Message",
    "name": "channel.subscription.message",
    "version": "1",
    "description": "A notification when a user sends a resubscription chat message in a specific channel.",
    "scope_required": "channel:read:subscriptions",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Subscription Message",
      "description": "A notification when a user sends a resubscription chat message in a specific channel.",
      "type": "object",
      "properties": {
        "user_id": {
          "description": "The user ID of the user who sent a resubscription chat message.",
          "type": "string"
        },
        "user_login": {
          "description": "The user login of the user who sent a resubscription chat message.",
          "type": "string"
        },
        "user_name": {
          "description": "The user display name of the user who a resubscription chat message.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "The broadcaster user ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The broadcaster display name.",
          "type": "string"
        },
        "tier": {
          "description": "The tier of the users subscription.",
          "type": "string"
        },
        "message": {
          "description": "An object that contains the resubscription message and emote information needed to recreate the message.",
          "type": "object",
          "properties": {
            "text": {
              "description": "The text of the resubscription chat message.",
              "type": "string"
            },
            "emotes": {
              "description": "An array that includes the emote ID and start and end positions for where the emote appears in the text.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "begin": {
                    "description": "The index of where the Emote starts in the text.",
                    "type": "integer"
                  },
                  "end": {
                    "description": "The index of where the Emote ends in the text.",
                    "type": "integer"
                  },
                  "id": {
                    "description": "The emote ID.",
                    "type": "string"
                  }
                },
                "required": ["begin", "end", "id"]
              }
            }
          },
          "required": ["text", "emotes"]
        },
        "cumulative_months": {
          "description": "The total number of months the user has been subscribed to the channel.",
          "type": "integer"
        },
        "streak_months": {
          "description": "The number of consecutive months the users current subscription has been active. This value is null if the user has opted out of sharing this information.",
          "type": "integer"
        },
        "duration_months": {
          "description": "The month duration of the subscription.",
          "type": "integer"
        }
      },
      "required": [
        "user_id",
        "user_login",
        "user_name",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "tier",
        "message",
        "cumulative_months",
        "streak_months",
        "duration_months"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Subscription Message request arguments",
      "description": "Required and optional query parameters for requesting a Channel Subscription Message event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID for the channel you want to get resubscription chat message notifications for.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Channel Cheer",
    "name": "channel.cheer",
    "version": "1",
    "description": "A user cheers on the specified channel.",
    "scope_required": "bits:read",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Cheer",
      "description": "A user cheers on the specified channel.",
      "type": "object",
      "properties": {
        "is_anonymous": {
          "description": "Whether the user cheered anonymously or not.",
          "type": "boolean"
        },
        "user_id": {
          "description": "The user ID for the user who cheered on the specified channel. This is null ifis_anonymousis true.",
          "type": "string"
        },
        "user_login": {
          "description": "The user login for the user who cheered on the specified channel. This is null ifis_anonymousis true.",
          "type": "string"
        },
        "user_name": {
          "description": "The user display name for the user who cheered on the specified channel. This is null ifis_anonymousis true.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "The requested broadcaster ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The requested broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The requested broadcaster display name.",
          "type": "string"
        },
        "message": {
          "description": "The message sent with the cheer.",
          "type": "string"
        },
        "bits": {
          "description": "The number of bits cheered.",
          "type": "integer"
        }
      },
      "required": [
        "is_anonymous",
        "user_id",
        "user_login",
        "user_name",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "message",
        "bits"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Cheer request arguments",
      "description": "Required and optional query parameters for requesting a Channel Cheer event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID for the channel you want to get cheer notifications for.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Channel Raid",
    "name": "channel.raid",
    "version": "1",
    "description": "A broadcaster raids another broadcasters channel.",
    "scope_required": null,
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Raid",
      "description": "A broadcaster raids another broadcasters channel.",
      "type": "object",
      "properties": {
        "from_broadcaster_user_id": {
          "description": "The broadcaster ID that created the raid.",
          "type": "string"
        },
        "from_broadcaster_user_login": {
          "description": "The broadcaster login that created the raid.",
          "type": "string"
        },
        "from_broadcaster_user_name": {
          "description": "The broadcaster display name that created the raid.",
          "type": "string"
        },
        "to_broadcaster_user_id": {
          "description": "The broadcaster ID that received the raid.",
          "type": "string"
        },
        "to_broadcaster_user_login": {
          "description": "The broadcaster login that received the raid.",
          "type": "string"
        },
        "to_broadcaster_user_name": {
          "description": "The broadcaster display name that received the raid.",
          "type": "string"
        },
        "viewers": {
          "description": "The number of viewers in the raid.",
          "type": "integer"
        }
      },
      "required": [
        "from_broadcaster_user_id",
        "from_broadcaster_user_login",
        "from_broadcaster_user_name",
        "to_broadcaster_user_id",
        "to_broadcaster_user_login",
        "to_broadcaster_user_name",
        "viewers"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Raid request arguments",
      "description": "Required and optional query parameters for requesting a Channel Raid event subscription",
      "type": "object",
      "properties": {
        "from_broadcaster_user_id": {
          "description": "The broadcaster user ID that created the channel raid you want to get notifications for. Use this parameter if you want to know when a specific broadcaster raids another broadcaster. The channel raid condition must include either from_broadcaster_user_id or to_broadcaster_user_id.",
          "type": "string"
        },
        "to_broadcaster_user_id": {
          "description": "The broadcaster user ID that received the channel raid you want to get notifications for. Use this parameter if you want to know when a specific broadcaster is raided by another broadcaster. The channel raid condition must include either from_broadcaster_user_id or to_broadcaster_user_id.",
          "type": "string"
        }
      },
      "required": []
    }
  },
  {
    "subscription_type": "Channel Ban",
    "name": "channel.ban",
    "version": "1",
    "description": "A viewer is banned from the specified channel.",
    "scope_required": "channel:moderate",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Ban",
      "description": "A viewer is banned from the specified channel.",
      "type": "object",
      "properties": {
        "user_id": {
          "description": "The user ID for the user who was banned on the specified channel.",
          "type": "string"
        },
        "user_login": {
          "description": "The user login for the user who was banned on the specified channel.",
          "type": "string"
        },
        "user_name": {
          "description": "The user display name for the user who was banned on the specified channel.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "The requested broadcaster ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The requested broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The requested broadcaster display name.",
          "type": "string"
        },
        "moderator_user_id": {
          "description": "The user ID of the issuer of the ban.",
          "type": "string"
        },
        "moderator_user_login": {
          "description": "The user login of the issuer of the ban.",
          "type": "string"
        },
        "moderator_user_name": {
          "description": "The user name of the issuer of the ban.",
          "type": "string"
        },
        "reason": {
          "description": "The reason behind the ban.",
          "type": "string"
        },
        "ends_at": {
          "description": "Will be null if permanent ban. If it is a timeout, this field shows when the timeout will end.",
          "type": "string"
        },
        "is_permanent": {
          "description": "Indicates whether the ban is permanent (true) or a timeout (false). If true, ends_at will be null.",
          "type": "boolean"
        }
      },
      "required": [
        "user_id",
        "user_login",
        "user_name",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "moderator_user_id",
        "moderator_user_login",
        "moderator_user_name",
        "reason",
        "ends_at",
        "is_permanent"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Ban request arguments",
      "description": "Required and optional query parameters for requesting a Channel Ban event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID for the channel you want to get ban notifications for.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Channel Unban",
    "name": "channel.unban",
    "version": "1",
    "description": "A viewer is unbanned from the specified channel.",
    "scope_required": "channel:moderate",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Unban",
      "description": "A viewer is unbanned from the specified channel.",
      "type": "object",
      "properties": {
        "user_id": {
          "description": "The user id for the user who was unbanned on the specified channel.",
          "type": "string"
        },
        "user_login": {
          "description": "The user login for the user who was unbanned on the specified channel.",
          "type": "string"
        },
        "user_name": {
          "description": "The user display name for the user who was unbanned on the specified channel.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "The requested broadcaster ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The requested broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The requested broadcaster display name.",
          "type": "string"
        },
        "moderator_user_id": {
          "description": "The user ID of the issuer of the unban.",
          "type": "string"
        },
        "moderator_user_login": {
          "description": "The user login of the issuer of the unban.",
          "type": "string"
        },
        "moderator_user_name": {
          "description": "The user name of the issuer of the unban.",
          "type": "string"
        }
      },
      "required": [
        "user_id",
        "user_login",
        "user_name",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "moderator_user_id",
        "moderator_user_login",
        "moderator_user_name"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Unban request arguments",
      "description": "Required and optional query parameters for requesting a Channel Unban event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID for the channel you want to get unban notifications for.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Channel Moderator Add",
    "name": "channel.moderator.add",
    "version": "1",
    "description": "Moderator privileges were added to a user on a specified channel.",
    "scope_required": "moderation:read",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Moderator Add",
      "description": "Moderator privileges were added to a user on a specified channel.",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The requested broadcaster ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The requested broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The requested broadcaster display name.",
          "type": "string"
        },
        "user_id": {
          "description": "The user ID of the new moderator.",
          "type": "string"
        },
        "user_login": {
          "description": "The user login of the new moderator.",
          "type": "string"
        },
        "user_name": {
          "description": "The display name of the new moderator.",
          "type": "string"
        }
      },
      "required": [
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "user_id",
        "user_login",
        "user_name"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Moderator Add request arguments",
      "description": "Required and optional query parameters for requesting a Channel Moderator Add event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID for the channel you want to get moderator addition notifications for.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Channel Moderator Remove",
    "name": "channel.moderator.remove",
    "version": "1",
    "description": "Moderator privileges were removed from a user on a specified channel.",
    "scope_required": "moderation:read",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Moderator Remove",
      "description": "Moderator privileges were removed from a user on a specified channel.",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The requested broadcaster ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The requested broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The requested broadcaster display name.",
          "type": "string"
        },
        "user_id": {
          "description": "The user ID of the removed moderator.",
          "type": "string"
        },
        "user_login": {
          "description": "The user login of the removed moderator.",
          "type": "string"
        },
        "user_name": {
          "description": "The display name of the removed moderator.",
          "type": "string"
        }
      },
      "required": [
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "user_id",
        "user_login",
        "user_name"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Moderator Remove request arguments",
      "description": "Required and optional query parameters for requesting a Channel Moderator Remove event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID for the channel you want to get moderator removal notifications for.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Channel Points Custom Reward Add",
    "name": "channel.channel_points_custom_reward.add",
    "version": "1",
    "description": "A custom channel points reward has been created for the specified channel.",
    "scope_required": "channel:read:redemptions",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Points Custom Reward Add",
      "description": "A custom channel points reward has been created for the specified channel.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The reward identifier.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "The requested broadcaster ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The requested broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The requested broadcaster display name.",
          "type": "string"
        },
        "is_enabled": {
          "description": "Is the reward currently enabled. If false, the reward wont show up to viewers.",
          "type": "boolean"
        },
        "is_paused": {
          "description": "Is the reward currently paused. If true, viewers cant redeem.",
          "type": "boolean"
        },
        "is_in_stock": {
          "description": "Is the reward currently in stock. If false, viewers cant redeem.",
          "type": "boolean"
        },
        "title": {
          "description": "The reward title.",
          "type": "string"
        },
        "cost": {
          "description": "The reward cost.",
          "type": "integer"
        },
        "prompt": {
          "description": "The reward description.",
          "type": "string"
        },
        "is_user_input_required": {
          "description": "Does the viewer need to enter information when redeeming the reward.",
          "type": "boolean"
        },
        "should_redemptions_skip_request_queue": {
          "description": "Should redemptions be set tofulfilledstatus immediately when redeemed and skip the request queue instead of the normalunfulfilledstatus.",
          "type": "boolean"
        },
        "max_per_stream": {
          "description": "Whether a maximum per stream is enabled and what the maximum is.",
          "type": "object",
          "properties": {
            "is_enabled": {
              "description": "Is the setting enabled.",
              "type": "boolean"
            },
            "value": {
              "description": "The max per stream limit.",
              "type": "integer"
            }
          },
          "required": ["is_enabled", "value"]
        },
        "max_per_user_per_stream": {
          "description": "Whether a maximum per user per stream is enabled and what the maximum is.",
          "type": "object",
          "properties": {
            "is_enabled": {
              "description": "Is the setting enabled.",
              "type": "boolean"
            },
            "value": {
              "description": "The max per user per stream limit.",
              "type": "integer"
            }
          },
          "required": ["is_enabled", "value"]
        },
        "background_color": {
          "description": "Custom background color for the reward. Format: Hex with # prefix. Example:#FA1ED2.",
          "type": "string"
        },
        "image": {
          "description": "Set of custom images of 1x, 2x and 4x sizes for the reward. Can benullif no images have been uploaded.",
          "type": "object",
          "properties": {
            "url_1x": {
              "description": "URL for the image at 1x size.",
              "type": "string"
            },
            "url_2x": {
              "description": "URL for the image at 2x size.",
              "type": "string"
            },
            "url_4x": {
              "description": "URL for the image at 4x size.",
              "type": "string"
            }
          },
          "required": ["url_1x", "url_2x", "url_4x"]
        },
        "default_image": {
          "description": "Set of default images of 1x, 2x and 4x sizes for the reward.",
          "type": "object",
          "properties": {
            "url_1x": {
              "description": "URL for the image at 1x size.",
              "type": "string"
            },
            "url_2x": {
              "description": "URL for the image at 2x size.",
              "type": "string"
            },
            "url_4x": {
              "description": "URL for the image at 4x size.",
              "type": "string"
            }
          },
          "required": ["url_1x", "url_2x", "url_4x"]
        },
        "global_cooldown": {
          "description": "Whether a cooldown is enabled and what the cooldown is in seconds.",
          "type": "object",
          "properties": {
            "is_enabled": {
              "description": "Is the setting enabled.",
              "type": "boolean"
            },
            "seconds": {
              "description": "The cooldown in seconds.",
              "type": "integer"
            }
          },
          "required": ["is_enabled", "seconds"]
        },
        "cooldown_expires_at": {
          "description": "Timestamp of the cooldown expiration.nullif the reward isnt on cooldown.",
          "type": "string"
        },
        "redemptions_redeemed_current_stream": {
          "description": "The number of redemptions redeemed during the current live stream. Counts against themax_per_streamlimit.nullif the broadcasters stream isnt live ormax_per_streamisnt enabled.",
          "type": "integer"
        }
      },
      "required": [
        "id",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "is_enabled",
        "is_paused",
        "is_in_stock",
        "title",
        "cost",
        "prompt",
        "is_user_input_required",
        "should_redemptions_skip_request_queue",
        "max_per_stream",
        "max_per_user_per_stream",
        "background_color",
        "image",
        "default_image",
        "global_cooldown",
        "cooldown_expires_at",
        "redemptions_redeemed_current_stream"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Points Custom Reward Add request arguments",
      "description": "Required and optional query parameters for requesting a Channel Points Custom Reward Add event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID for the channel you want to receive channel points custom reward add notifications for.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Channel Points Custom Reward Update",
    "name": "channel.channel_points_custom_reward.update",
    "version": "1",
    "description": "A custom channel points reward has been updated for the specified channel.",
    "scope_required": "channel:read:redemptions",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Points Custom Reward Update",
      "description": "A custom channel points reward has been updated for the specified channel.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The reward identifier.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "The requested broadcaster ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The requested broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The requested broadcaster display name.",
          "type": "string"
        },
        "is_enabled": {
          "description": "Is the reward currently enabled. If false, the reward wont show up to viewers.",
          "type": "boolean"
        },
        "is_paused": {
          "description": "Is the reward currently paused. If true, viewers cant redeem.",
          "type": "boolean"
        },
        "is_in_stock": {
          "description": "Is the reward currently in stock. If false, viewers cant redeem.",
          "type": "boolean"
        },
        "title": {
          "description": "The reward title.",
          "type": "string"
        },
        "cost": {
          "description": "The reward cost.",
          "type": "integer"
        },
        "prompt": {
          "description": "The reward description.",
          "type": "string"
        },
        "is_user_input_required": {
          "description": "Does the viewer need to enter information when redeeming the reward.",
          "type": "boolean"
        },
        "should_redemptions_skip_request_queue": {
          "description": "Should redemptions be set tofulfilledstatus immediately when redeemed and skip the request queue instead of the normalunfulfilledstatus.",
          "type": "boolean"
        },
        "max_per_stream": {
          "description": "Whether a maximum per stream is enabled and what the maximum is.",
          "type": "object",
          "properties": {
            "is_enabled": {
              "description": "Is the setting enabled.",
              "type": "boolean"
            },
            "value": {
              "description": "The max per stream limit.",
              "type": "integer"
            }
          },
          "required": ["is_enabled", "value"]
        },
        "max_per_user_per_stream": {
          "description": "Whether a maximum per user per stream is enabled and what the maximum is.",
          "type": "object",
          "properties": {
            "is_enabled": {
              "description": "Is the setting enabled.",
              "type": "boolean"
            },
            "value": {
              "description": "The max per user per stream limit.",
              "type": "integer"
            }
          },
          "required": ["is_enabled", "value"]
        },
        "background_color": {
          "description": "Custom background color for the reward. Format: Hex with # prefix. Example:#FA1ED2.",
          "type": "string"
        },
        "image": {
          "description": "Set of custom images of 1x, 2x and 4x sizes for the reward. Can benullif no images have been uploaded.",
          "type": "object",
          "properties": {
            "url_1x": {
              "description": "URL for the image at 1x size.",
              "type": "string"
            },
            "url_2x": {
              "description": "URL for the image at 2x size.",
              "type": "string"
            },
            "url_4x": {
              "description": "URL for the image at 4x size.",
              "type": "string"
            }
          },
          "required": ["url_1x", "url_2x", "url_4x"]
        },
        "default_image": {
          "description": "Set of default images of 1x, 2x and 4x sizes for the reward.",
          "type": "object",
          "properties": {
            "url_1x": {
              "description": "URL for the image at 1x size.",
              "type": "string"
            },
            "url_2x": {
              "description": "URL for the image at 2x size.",
              "type": "string"
            },
            "url_4x": {
              "description": "URL for the image at 4x size.",
              "type": "string"
            }
          },
          "required": ["url_1x", "url_2x", "url_4x"]
        },
        "global_cooldown": {
          "description": "Whether a cooldown is enabled and what the cooldown is in seconds.",
          "type": "object",
          "properties": {
            "is_enabled": {
              "description": "Is the setting enabled.",
              "type": "boolean"
            },
            "seconds": {
              "description": "The cooldown in seconds.",
              "type": "integer"
            }
          },
          "required": ["is_enabled", "seconds"]
        },
        "cooldown_expires_at": {
          "description": "Timestamp of the cooldown expiration.nullif the reward isnt on cooldown.",
          "type": "string"
        },
        "redemptions_redeemed_current_stream": {
          "description": "The number of redemptions redeemed during the current live stream. Counts against themax_per_streamlimit.nullif the broadcasters stream isnt live ormax_per_streamisnt enabled.",
          "type": "integer"
        }
      },
      "required": [
        "id",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "is_enabled",
        "is_paused",
        "is_in_stock",
        "title",
        "cost",
        "prompt",
        "is_user_input_required",
        "should_redemptions_skip_request_queue",
        "max_per_stream",
        "max_per_user_per_stream",
        "background_color",
        "image",
        "default_image",
        "global_cooldown",
        "cooldown_expires_at",
        "redemptions_redeemed_current_stream"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Points Custom Reward Update request arguments",
      "description": "Required and optional query parameters for requesting a Channel Points Custom Reward Update event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID for the channel you want to receive channel points custom reward update notifications for.",
          "type": "string"
        },
        "reward_id": {
          "description": "Optional. Specify a reward id to only receive notifications for a specific reward.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Channel Points Custom Reward Remove",
    "name": "channel.channel_points_custom_reward.remove",
    "version": "1",
    "description": "A custom channel points reward has been removed from the specified channel.",
    "scope_required": "channel:read:redemptions",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Points Custom Reward Remove",
      "description": "A custom channel points reward has been removed from the specified channel.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The reward identifier.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "The requested broadcaster ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The requested broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The requested broadcaster display name.",
          "type": "string"
        },
        "is_enabled": {
          "description": "Is the reward currently enabled. If false, the reward wont show up to viewers.",
          "type": "boolean"
        },
        "is_paused": {
          "description": "Is the reward currently paused. If true, viewers cant redeem.",
          "type": "boolean"
        },
        "is_in_stock": {
          "description": "Is the reward currently in stock. If false, viewers cant redeem.",
          "type": "boolean"
        },
        "title": {
          "description": "The reward title.",
          "type": "string"
        },
        "cost": {
          "description": "The reward cost.",
          "type": "integer"
        },
        "prompt": {
          "description": "The reward description.",
          "type": "string"
        },
        "is_user_input_required": {
          "description": "Does the viewer need to enter information when redeeming the reward.",
          "type": "boolean"
        },
        "should_redemptions_skip_request_queue": {
          "description": "Should redemptions be set tofulfilledstatus immediately when redeemed and skip the request queue instead of the normalunfulfilledstatus.",
          "type": "boolean"
        },
        "max_per_stream": {
          "description": "Whether a maximum per stream is enabled and what the maximum is.",
          "type": "object",
          "properties": {
            "is_enabled": {
              "description": "Is the setting enabled.",
              "type": "boolean"
            },
            "value": {
              "description": "The max per stream limit.",
              "type": "integer"
            }
          },
          "required": ["is_enabled", "value"]
        },
        "max_per_user_per_stream": {
          "description": "Whether a maximum per user per stream is enabled and what the maximum is.",
          "type": "object",
          "properties": {
            "is_enabled": {
              "description": "Is the setting enabled.",
              "type": "boolean"
            },
            "value": {
              "description": "The max per user per stream limit.",
              "type": "integer"
            }
          },
          "required": ["is_enabled", "value"]
        },
        "background_color": {
          "description": "Custom background color for the reward. Format: Hex with # prefix. Example:#FA1ED2.",
          "type": "string"
        },
        "image": {
          "description": "Set of custom images of 1x, 2x and 4x sizes for the reward. Can benullif no images have been uploaded.",
          "type": "object",
          "properties": {
            "url_1x": {
              "description": "URL for the image at 1x size.",
              "type": "string"
            },
            "url_2x": {
              "description": "URL for the image at 2x size.",
              "type": "string"
            },
            "url_4x": {
              "description": "URL for the image at 4x size.",
              "type": "string"
            }
          },
          "required": ["url_1x", "url_2x", "url_4x"]
        },
        "default_image": {
          "description": "Set of default images of 1x, 2x and 4x sizes for the reward.",
          "type": "object",
          "properties": {
            "url_1x": {
              "description": "URL for the image at 1x size.",
              "type": "string"
            },
            "url_2x": {
              "description": "URL for the image at 2x size.",
              "type": "string"
            },
            "url_4x": {
              "description": "URL for the image at 4x size.",
              "type": "string"
            }
          },
          "required": ["url_1x", "url_2x", "url_4x"]
        },
        "global_cooldown": {
          "description": "Whether a cooldown is enabled and what the cooldown is in seconds.",
          "type": "object",
          "properties": {
            "is_enabled": {
              "description": "Is the setting enabled.",
              "type": "boolean"
            },
            "seconds": {
              "description": "The cooldown in seconds.",
              "type": "integer"
            }
          },
          "required": ["is_enabled", "seconds"]
        },
        "cooldown_expires_at": {
          "description": "Timestamp of the cooldown expiration.nullif the reward isnt on cooldown.",
          "type": "string"
        },
        "redemptions_redeemed_current_stream": {
          "description": "The number of redemptions redeemed during the current live stream. Counts against themax_per_streamlimit.nullif the broadcasters stream isnt live ormax_per_streamisnt enabled.",
          "type": "integer"
        }
      },
      "required": [
        "id",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "is_enabled",
        "is_paused",
        "is_in_stock",
        "title",
        "cost",
        "prompt",
        "is_user_input_required",
        "should_redemptions_skip_request_queue",
        "max_per_stream",
        "max_per_user_per_stream",
        "background_color",
        "image",
        "default_image",
        "global_cooldown",
        "cooldown_expires_at",
        "redemptions_redeemed_current_stream"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Points Custom Reward Remove request arguments",
      "description": "Required and optional query parameters for requesting a Channel Points Custom Reward Remove event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID for the channel you want to receive channel points custom reward remove notifications for.",
          "type": "string"
        },
        "reward_id": {
          "description": "Optional. Specify a reward id to only receive notifications for a specific reward.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Channel Points Custom Reward Redemption Add",
    "name": "channel.channel_points_custom_reward_redemption.add",
    "version": "1",
    "description": "A viewer has redeemed a custom channel points reward on the specified channel.",
    "scope_required": "channel:read:redemptions",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Points Custom Reward Redemption Add",
      "description": "A viewer has redeemed a custom channel points reward on the specified channel.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The redemption identifier.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "The requested broadcaster ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The requested broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The requested broadcaster display name.",
          "type": "string"
        },
        "user_id": {
          "description": "User ID of the user that redeemed the reward.",
          "type": "string"
        },
        "user_login": {
          "description": "Login of the user that redeemed the reward.",
          "type": "string"
        },
        "user_name": {
          "description": "Display name of the user that redeemed the reward.",
          "type": "string"
        },
        "user_input": {
          "description": "The user input provided. Empty string if not provided.",
          "type": "string"
        },
        "status": {
          "description": "Defaults tounfulfilled. Possible values areunknown,unfulfilled,fulfilled, andcanceled.",
          "type": "string"
        },
        "reward": {
          "description": "Basic information about the reward that was redeemed, at the time it was redeemed.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The reward identifier.",
              "type": "string"
            },
            "title": {
              "description": "The reward name.",
              "type": "string"
            },
            "cost": {
              "description": "The reward cost.",
              "type": "integer"
            },
            "prompt": {
              "description": "The reward description.",
              "type": "string"
            }
          },
          "required": ["id", "title", "cost", "prompt"]
        },
        "redeemed_at": {
          "description": "RFC3339 timestamp of when the reward was redeemed.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "user_id",
        "user_login",
        "user_name",
        "user_input",
        "status",
        "reward",
        "redeemed_at"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Points Custom Reward Redemption Add request arguments",
      "description": "Required and optional query parameters for requesting a Channel Points Custom Reward Redemption Add event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID for the channel you want to receive channel points custom reward redemption add notifications for.",
          "type": "string"
        },
        "reward_id": {
          "description": "Optional. Specify a reward id to only receive notifications for a specific reward.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Channel Points Custom Reward Redemption Update",
    "name": "channel.channel_points_custom_reward_redemption.update",
    "version": "1",
    "description": "A redemption of a channel points custom reward has been updated for the specified channel.",
    "scope_required": "channel:read:redemptions",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Points Custom Reward Redemption Update",
      "description": "A redemption of a channel points custom reward has been updated for the specified channel.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The redemption identifier.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "The requested broadcaster ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The requested broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The requested broadcaster display name.",
          "type": "string"
        },
        "user_id": {
          "description": "User ID of the user that redeemed the reward.",
          "type": "string"
        },
        "user_login": {
          "description": "Login of the user that redeemed the reward.",
          "type": "string"
        },
        "user_name": {
          "description": "Display name of the user that redeemed the reward.",
          "type": "string"
        },
        "user_input": {
          "description": "The user input provided. Empty string if not provided.",
          "type": "string"
        },
        "status": {
          "description": "Will befulfilledorcanceled. Possible values areunknown,unfulfilled,fulfilled, andcanceled.",
          "type": "string"
        },
        "reward": {
          "description": "Basic information about the reward that was redeemed, at the time it was redeemed.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The reward identifier.",
              "type": "string"
            },
            "title": {
              "description": "The reward name.",
              "type": "string"
            },
            "cost": {
              "description": "The reward cost.",
              "type": "integer"
            },
            "prompt": {
              "description": "The reward description.",
              "type": "string"
            }
          },
          "required": ["id", "title", "cost", "prompt"]
        },
        "redeemed_at": {
          "description": "RFC3339 timestamp of when the reward was redeemed.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "user_id",
        "user_login",
        "user_name",
        "user_input",
        "status",
        "reward",
        "redeemed_at"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Points Custom Reward Redemption Update request arguments",
      "description": "Required and optional query parameters for requesting a Channel Points Custom Reward Redemption Update event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID for the channel you want to receive channel points custom reward redemption update notifications for.",
          "type": "string"
        },
        "reward_id": {
          "description": "Optional. Specify a reward id to only receive notifications for a specific reward.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Channel Poll Begin",
    "name": "channel.poll.begin",
    "version": "1",
    "description": "A poll started on a specified channel.",
    "scope_required": "channel:read:polls",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Poll Begin",
      "description": "A poll started on a specified channel.",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the poll.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "The requested broadcaster ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The requested broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The requested broadcaster display name.",
          "type": "string"
        },
        "title": {
          "description": "Question displayed for the poll.",
          "type": "string"
        },
        "choices": {
          "description": "An array of choices for the poll.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "description": "ID for the choice.",
                "type": "string"
              },
              "title": {
                "description": "Text displayed for the choice.",
                "type": "string"
              },
              "bits_votes": {
                "description": "Number of votes received via Bits.",
                "type": "integer"
              },
              "channel_points_votes": {
                "description": "Number of votes received via Channel Points.",
                "type": "integer"
              },
              "votes": {
                "description": "Total number of votes received for the choice across all methods of voting.",
                "type": "integer"
              }
            },
            "required": [
              "id",
              "title",
              "bits_votes",
              "channel_points_votes",
              "votes"
            ]
          }
        },
        "bits_voting": {
          "description": "The Bits voting settings for the poll.",
          "type": "object",
          "properties": {
            "is_enabled": {
              "description": "Indicates if Bits can be used for voting.",
              "type": "boolean"
            },
            "amount_per_vote": {
              "description": "Number of Bits required to vote once with Bits.",
              "type": "integer"
            }
          },
          "required": ["is_enabled", "amount_per_vote"]
        },
        "channel_points_voting": {
          "description": "The Channel Points voting settings for the poll.",
          "type": "object",
          "properties": {
            "is_enabled": {
              "description": "Indicates if Channel Points can be used for voting.",
              "type": "boolean"
            },
            "amount_per_vote": {
              "description": "Number of Channel Points required to vote once with Channel Points.",
              "type": "integer"
            }
          },
          "required": ["is_enabled", "amount_per_vote"]
        },
        "started_at": {
          "description": "The time the poll started.",
          "type": "string"
        },
        "ends_at": {
          "description": "The time the poll will end.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "title",
        "choices",
        "bits_voting",
        "channel_points_voting",
        "started_at",
        "ends_at"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Poll Begin request arguments",
      "description": "Required and optional query parameters for requesting a Channel Poll Begin event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID of the channel for which poll begin notifications will be received.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Channel Poll Progress",
    "name": "channel.poll.progress",
    "version": "1",
    "description": "Users respond to a poll on a specified channel.",
    "scope_required": "channel:read:polls",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Poll Progress",
      "description": "Users respond to a poll on a specified channel.",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the poll.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "The requested broadcaster ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The requested broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The requested broadcaster display name.",
          "type": "string"
        },
        "title": {
          "description": "Question displayed for the poll.",
          "type": "string"
        },
        "choices": {
          "description": "An array of choices for the poll. Includes vote counts.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "description": "ID for the choice.",
                "type": "string"
              },
              "title": {
                "description": "Text displayed for the choice.",
                "type": "string"
              },
              "bits_votes": {
                "description": "Number of votes received via Bits.",
                "type": "integer"
              },
              "channel_points_votes": {
                "description": "Number of votes received via Channel Points.",
                "type": "integer"
              },
              "votes": {
                "description": "Total number of votes received for the choice across all methods of voting.",
                "type": "integer"
              }
            },
            "required": [
              "id",
              "title",
              "bits_votes",
              "channel_points_votes",
              "votes"
            ]
          }
        },
        "bits_voting": {
          "description": "The Bits voting settings for the poll.",
          "type": "object",
          "properties": {
            "is_enabled": {
              "description": "Indicates if Bits can be used for voting.",
              "type": "boolean"
            },
            "amount_per_vote": {
              "description": "Number of Bits required to vote once with Bits.",
              "type": "integer"
            }
          },
          "required": ["is_enabled", "amount_per_vote"]
        },
        "channel_points_voting": {
          "description": "The Channel Points voting settings for the poll.",
          "type": "object",
          "properties": {
            "is_enabled": {
              "description": "Indicates if Channel Points can be used for voting.",
              "type": "boolean"
            },
            "amount_per_vote": {
              "description": "Number of Channel Points required to vote once with Channel Points.",
              "type": "integer"
            }
          },
          "required": ["is_enabled", "amount_per_vote"]
        },
        "started_at": {
          "description": "The time the poll started.",
          "type": "string"
        },
        "ends_at": {
          "description": "The time the poll will end.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "title",
        "choices",
        "bits_voting",
        "channel_points_voting",
        "started_at",
        "ends_at"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Poll Progress request arguments",
      "description": "Required and optional query parameters for requesting a Channel Poll Progress event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID of the channel for which poll progress notifications will be received.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Channel Poll End",
    "name": "channel.poll.end",
    "version": "1",
    "description": "A poll ended on a specified channel.",
    "scope_required": "channel:read:polls",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Poll End",
      "description": "A poll ended on a specified channel.",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the poll.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "The requested broadcaster ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The requested broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The requested broadcaster display name.",
          "type": "string"
        },
        "title": {
          "description": "Question displayed for the poll.",
          "type": "string"
        },
        "choices": {
          "description": "An array of choices for the poll. Includes vote counts.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "description": "ID for the choice.",
                "type": "string"
              },
              "title": {
                "description": "Text displayed for the choice.",
                "type": "string"
              },
              "bits_votes": {
                "description": "Number of votes received via Bits.",
                "type": "integer"
              },
              "channel_points_votes": {
                "description": "Number of votes received via Channel Points.",
                "type": "integer"
              },
              "votes": {
                "description": "Total number of votes received for the choice across all methods of voting.",
                "type": "integer"
              }
            },
            "required": [
              "id",
              "title",
              "bits_votes",
              "channel_points_votes",
              "votes"
            ]
          }
        },
        "bits_voting": {
          "description": "The Bits voting settings for the poll.",
          "type": "object",
          "properties": {
            "is_enabled": {
              "description": "Indicates if Bits can be used for voting.",
              "type": "boolean"
            },
            "amount_per_vote": {
              "description": "Number of Bits required to vote once with Bits.",
              "type": "integer"
            }
          },
          "required": ["is_enabled", "amount_per_vote"]
        },
        "channel_points_voting": {
          "description": "The Channel Points voting settings for the poll.",
          "type": "object",
          "properties": {
            "is_enabled": {
              "description": "Indicates if Channel Points can be used for voting.",
              "type": "boolean"
            },
            "amount_per_vote": {
              "description": "Number of Channel Points required to vote once with Channel Points.",
              "type": "integer"
            }
          },
          "required": ["is_enabled", "amount_per_vote"]
        },
        "status": {
          "description": "The status of the poll. Valid values are completed, archived, and terminated.",
          "type": "string"
        },
        "started_at": {
          "description": "The time the poll started.",
          "type": "string"
        },
        "ended_at": {
          "description": "The time the poll ended.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "title",
        "choices",
        "bits_voting",
        "channel_points_voting",
        "status",
        "started_at",
        "ended_at"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Poll End request arguments",
      "description": "Required and optional query parameters for requesting a Channel Poll End event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID of the channel for which poll end notifications will be received.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Channel Prediction Begin",
    "name": "channel.prediction.begin",
    "version": "1",
    "description": "A Prediction started on a specified channel.",
    "scope_required": "channel:read:predictions",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Prediction Begin",
      "description": "A Prediction started on a specified channel.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Channel Points Prediction ID.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "The requested broadcaster ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The requested broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The requested broadcaster display name.",
          "type": "string"
        },
        "title": {
          "description": "Title for the Channel Points Prediction.",
          "type": "string"
        },
        "outcomes": {
          "description": "An array of outcomes for the Channel Points Prediction.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "description": "The outcome ID.",
                "type": "string"
              },
              "title": {
                "description": "The outcome title.",
                "type": "string"
              },
              "color": {
                "description": "The color for the outcome. Valid values are pink and blue.",
                "type": "string"
              },
              "users": {
                "description": "The number of users who used Channel Points on this outcome.",
                "type": "integer"
              },
              "channel_points": {
                "description": "The total number of Channel Points used on this outcome.",
                "type": "integer"
              },
              "top_predictors": {
                "description": "An array of users who used the most Channel Points on this outcome.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "user_id": {
                      "description": "The ID of the user.",
                      "type": "string"
                    },
                    "user_login": {
                      "description": "The login of the user.",
                      "type": "string"
                    },
                    "user_name": {
                      "description": "The display name of the user.",
                      "type": "string"
                    },
                    "channel_points_won": {
                      "description": "The number of Channel Points won. This value is always null in the event payload for Prediction progress and Prediction lock. This value is 0 if the outcome did not win or if the Prediction was canceled and Channel Points were refunded.",
                      "type": "integer"
                    },
                    "channel_points_used": {
                      "description": "The number of Channel Points used to participate in the Prediction.",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "user_id",
                    "user_login",
                    "user_name",
                    "channel_points_won",
                    "channel_points_used"
                  ]
                }
              }
            },
            "required": [
              "id",
              "title",
              "color",
              "users",
              "channel_points",
              "top_predictors"
            ]
          }
        },
        "started_at": {
          "description": "The time the Channel Points Prediction started.",
          "type": "string"
        },
        "locks_at": {
          "description": "The time the Channel Points Prediction will automatically lock.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "title",
        "outcomes",
        "started_at",
        "locks_at"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Prediction Begin request arguments",
      "description": "Required and optional query parameters for requesting a Channel Prediction Begin event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID of the channel for which prediction begin notifications will be received.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Channel Prediction Progress",
    "name": "channel.prediction.progress",
    "version": "1",
    "description": "Users participated in a Prediction on a specified channel.",
    "scope_required": "channel:read:predictions",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Prediction Progress",
      "description": "Users participated in a Prediction on a specified channel.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Channel Points Prediction ID.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "The requested broadcaster ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The requested broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The requested broadcaster display name.",
          "type": "string"
        },
        "title": {
          "description": "Title for the Channel Points Prediction.",
          "type": "string"
        },
        "outcomes": {
          "description": "An array of outcomes for the Channel Points Prediction. Includes top_predictors.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "description": "The outcome ID.",
                "type": "string"
              },
              "title": {
                "description": "The outcome title.",
                "type": "string"
              },
              "color": {
                "description": "The color for the outcome. Valid values are pink and blue.",
                "type": "string"
              },
              "users": {
                "description": "The number of users who used Channel Points on this outcome.",
                "type": "integer"
              },
              "channel_points": {
                "description": "The total number of Channel Points used on this outcome.",
                "type": "integer"
              },
              "top_predictors": {
                "description": "An array of users who used the most Channel Points on this outcome.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "user_id": {
                      "description": "The ID of the user.",
                      "type": "string"
                    },
                    "user_login": {
                      "description": "The login of the user.",
                      "type": "string"
                    },
                    "user_name": {
                      "description": "The display name of the user.",
                      "type": "string"
                    },
                    "channel_points_won": {
                      "description": "The number of Channel Points won. This value is always null in the event payload for Prediction progress and Prediction lock. This value is 0 if the outcome did not win or if the Prediction was canceled and Channel Points were refunded.",
                      "type": "integer"
                    },
                    "channel_points_used": {
                      "description": "The number of Channel Points used to participate in the Prediction.",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "user_id",
                    "user_login",
                    "user_name",
                    "channel_points_won",
                    "channel_points_used"
                  ]
                }
              }
            },
            "required": [
              "id",
              "title",
              "color",
              "users",
              "channel_points",
              "top_predictors"
            ]
          }
        },
        "started_at": {
          "description": "The time the Channel Points Prediction started.",
          "type": "string"
        },
        "locks_at": {
          "description": "The time the Channel Points Prediction will automatically lock.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "title",
        "outcomes",
        "started_at",
        "locks_at"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Prediction Progress request arguments",
      "description": "Required and optional query parameters for requesting a Channel Prediction Progress event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID of the channel for which prediction progress notifications will be received.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Channel Prediction Lock",
    "name": "channel.prediction.lock",
    "version": "1",
    "description": "A Prediction was locked on a specified channel.",
    "scope_required": "channel:read:predictions",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Prediction Lock",
      "description": "A Prediction was locked on a specified channel.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Channel Points Prediction ID.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "The requested broadcaster ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The requested broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The requested broadcaster display name.",
          "type": "string"
        },
        "title": {
          "description": "Title for the Channel Points Prediction.",
          "type": "string"
        },
        "outcomes": {
          "description": "An array of outcomes for the Channel Points Prediction. Includes top_predictors.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "description": "The outcome ID.",
                "type": "string"
              },
              "title": {
                "description": "The outcome title.",
                "type": "string"
              },
              "color": {
                "description": "The color for the outcome. Valid values are pink and blue.",
                "type": "string"
              },
              "users": {
                "description": "The number of users who used Channel Points on this outcome.",
                "type": "integer"
              },
              "channel_points": {
                "description": "The total number of Channel Points used on this outcome.",
                "type": "integer"
              },
              "top_predictors": {
                "description": "An array of users who used the most Channel Points on this outcome.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "user_id": {
                      "description": "The ID of the user.",
                      "type": "string"
                    },
                    "user_login": {
                      "description": "The login of the user.",
                      "type": "string"
                    },
                    "user_name": {
                      "description": "The display name of the user.",
                      "type": "string"
                    },
                    "channel_points_won": {
                      "description": "The number of Channel Points won. This value is always null in the event payload for Prediction progress and Prediction lock. This value is 0 if the outcome did not win or if the Prediction was canceled and Channel Points were refunded.",
                      "type": "integer"
                    },
                    "channel_points_used": {
                      "description": "The number of Channel Points used to participate in the Prediction.",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "user_id",
                    "user_login",
                    "user_name",
                    "channel_points_won",
                    "channel_points_used"
                  ]
                }
              }
            },
            "required": [
              "id",
              "title",
              "color",
              "users",
              "channel_points",
              "top_predictors"
            ]
          }
        },
        "started_at": {
          "description": "The time the Channel Points Prediction started.",
          "type": "string"
        },
        "locked_at": {
          "description": "The time the Channel Points Prediction was locked.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "title",
        "outcomes",
        "started_at",
        "locked_at"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Prediction Lock request arguments",
      "description": "Required and optional query parameters for requesting a Channel Prediction Lock event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID of the channel for which prediction lock notifications will be received.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Channel Prediction End",
    "name": "channel.prediction.end",
    "version": "1",
    "description": "A Prediction ended on a specified channel.",
    "scope_required": "channel:read:predictions",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Prediction End",
      "description": "A Prediction ended on a specified channel.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Channel Points Prediction ID.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "The requested broadcaster ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The requested broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The requested broadcaster display name.",
          "type": "string"
        },
        "title": {
          "description": "Title for the Channel Points Prediction.",
          "type": "string"
        },
        "winning_outcome_id": {
          "description": "ID of the winning outcome.",
          "type": "string"
        },
        "outcomes": {
          "description": "An array of outcomes for the Channel Points Prediction. Includes top_predictors.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "description": "The outcome ID.",
                "type": "string"
              },
              "title": {
                "description": "The outcome title.",
                "type": "string"
              },
              "color": {
                "description": "The color for the outcome. Valid values are pink and blue.",
                "type": "string"
              },
              "users": {
                "description": "The number of users who used Channel Points on this outcome.",
                "type": "integer"
              },
              "channel_points": {
                "description": "The total number of Channel Points used on this outcome.",
                "type": "integer"
              },
              "top_predictors": {
                "description": "An array of users who used the most Channel Points on this outcome.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "user_id": {
                      "description": "The ID of the user.",
                      "type": "string"
                    },
                    "user_login": {
                      "description": "The login of the user.",
                      "type": "string"
                    },
                    "user_name": {
                      "description": "The display name of the user.",
                      "type": "string"
                    },
                    "channel_points_won": {
                      "description": "The number of Channel Points won. This value is always null in the event payload for Prediction progress and Prediction lock. This value is 0 if the outcome did not win or if the Prediction was canceled and Channel Points were refunded.",
                      "type": "integer"
                    },
                    "channel_points_used": {
                      "description": "The number of Channel Points used to participate in the Prediction.",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "user_id",
                    "user_login",
                    "user_name",
                    "channel_points_won",
                    "channel_points_used"
                  ]
                }
              }
            },
            "required": [
              "id",
              "title",
              "color",
              "users",
              "channel_points",
              "top_predictors"
            ]
          }
        },
        "status": {
          "description": "The status of the Channel Points Prediction. Valid values are resolved and canceled.",
          "type": "string"
        },
        "started_at": {
          "description": "The time the Channel Points Prediction started.",
          "type": "string"
        },
        "ended_at": {
          "description": "The time the Channel Points Prediction ended.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "title",
        "winning_outcome_id",
        "outcomes",
        "status",
        "started_at",
        "ended_at"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Channel Prediction End request arguments",
      "description": "Required and optional query parameters for requesting a Channel Prediction End event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID of the channel for which prediction end notifications will be received.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Charity Donation",
    "name": "channel.charity_campaign.donate",
    "version": "1",
    "description": "Sends an event notification when a user donates to the broadcaster's charity campaign.\nThe event data does not include information about the charity such as its name, description, and logo. To get information about the charity, use the Get Charity Campaign endpoint",
    "scope_required": "channel:read:charity",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Charity Donation",
      "description": "A viewer donated to the charity campaign",
      "type": "object",
      "properties": {
        "campaign_id": {
          "description": "The Campaign ID.",
          "type": "string"
        },
        "broadcaster_id": {
          "description": "An ID that uniquely identifies the broadcaster that's running the campaign.",
          "type": "string"
        },
        "broadcaster_login": {
          "description": "The broadcaster's login name.",
          "type": "string"
        },
        "broadcaster_name": {
          "description": "The broadcaster's display name.",
          "type": "string"
        },
        "user_id": {
          "description": "An ID that uniquely identifies the user that donated to the campaign.",
          "type": "string"
        },
        "user_login": {
          "description": "The user's login name.",
          "type": "string"
        },
        "user_name": {
          "description": "The user's display name.",
          "type": "string"
        },
        "amount": {
          "description": "An object that contains the amount of the user's donation.",
          "type": "object",
          "properties": {
            "value": {
              "description": "The monetary amount. The amount is specified in the currency's minor unit. For example, the minor units for USD is cents, so if the amount is $5.50 USD, value is set to 550.",
              "type": "integer"
            },
            "decimal_places": {
              "description": "The number of decimal places used by the currency. For example, USD uses two decimal places. Use this number to translate value from minor units to major units by using the formula:\n\nvalue / 10^decimal_places",
              "type": "integer"
            },
            "currency": {
              "description": "The ISO-4217 three-letter currency code that identifies the type of currency in value.",
              "type": "string"
            }
          },
          "required": ["value", "decimal_places", "currency"]
        }
      },
      "required": [
        "campaign_id",
        "broadcaster_id",
        "broadcaster_login",
        "broadcaster_name",
        "user_id",
        "user_login",
        "user_name",
        "amount"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Charity Donation request arguments",
      "description": "Required and optional query parameters for requesting a Charity Donations event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID for the channel you want to Charity Donations notifications for.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Charity Campaign Start",
    "name": "channel.charity_campaign.start",
    "version": "1",
    "description": "Sends a notification when the broadcaster starts a charity campaign. It's possible to receive this event after the Progress event.",
    "scope_required": "channel:read:charity",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Charity Campaign Start",
      "description": "A broadcaster started a charity campaign.",
      "type": "object",
      "properties": {
        "id": {
          "description": "An ID that identifies the charity campaign.",
          "type": "string"
        },
        "broadcaster_id": {
          "description": "An ID that identifies the broadcaster that's running the campaign.",
          "type": "string"
        },
        "broadcaster_login": {
          "description": "The broadcaster's login name.",
          "type": "string"
        },
        "broadcaster_name": {
          "description": "The broadcaster's display name.",
          "type": "string"
        },
        "charity_name": {
          "description": "The charity's name.",
          "type": "string"
        },
        "charity_description": {
          "description": "A description of the charity.",
          "type": "string"
        },
        "charity_logo": {
          "description": "A URL to an image of the charity's logo. The image's type is PNG and its size is 100px X 100px.",
          "type": "string"
        },
        "charity_website": {
          "description": "A URL to the charity's website.",
          "type": "string"
        },
        "current_amount": {
          "description": "An object that contains the current amount of donations that the campaign has received.",
          "type": "object",
          "properties": {
            "value": {
              "description": "The monetary amount. The amount is specified in the currency's minor unit. For example, the minor units for USD is cents, so if the amount is $5.50 USD, value is set to 550.",
              "type": "integer"
            },
            "decimal_places": {
              "description": "The number of decimal places used by the currency. For example, USD uses two decimal places. Use this number to translate value from minor units to major units by using the formula:\n\nvalue / 10^decimal_places",
              "type": "integer"
            },
            "currency": {
              "description": "The ISO-4217 three-letter currency code that identifies the type of currency in value.",
              "type": "string"
            }
          },
          "required": ["value", "decimal_places", "currency"]
        },
        "target_amount": {
          "description": "An object that contains the campaign's target fundraising goal.",
          "type": "object",
          "properties": {
            "value": {
              "description": "The monetary amount. The amount is specified in the currency's minor unit. For example, the minor units for USD is cents, so if the amount is $5.50 USD, value is set to 550.",
              "type": "integer"
            },
            "decimal_places": {
              "description": "The number of decimal places used by the currency. For example, USD uses two decimal places. Use this number to translate value from minor units to major units by using the formula:\n\nvalue / 10^decimal_places",
              "type": "integer"
            },
            "currency": {
              "description": "The ISO-4217 three-letter currency code that identifies the type of currency in value.",
              "type": "string"
            }
          },
          "required": ["value", "decimal_places", "currency"]
        },
        "started_at": {
          "description": "The UTC timestamp (in RFC3339 format) of when the broadcaster started the campaign.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "broadcaster_id",
        "broadcaster_login",
        "broadcaster_name",
        "charity_name",
        "charity_description",
        "charity_logo",
        "charity_website",
        "current_amount",
        "target_amount",
        "started_at"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Charity Campaign Start request arguments",
      "description": "Required and optional query parameters for requesting a Charity Campaign Start event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The ID of the broadcaster that you want to receive notifications about when they start a charity campaign.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Charity Campaign Progress",
    "name": "channel.charity_campaign.progress",
    "version": "1",
    "description": "Sends notifications when progress is made towards the campaign's goal or when the broadcaster changes the fundraising goal.  It's possible to receive this event before the Start event.",
    "scope_required": "channel:read:charity",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Charity Campaign Progress",
      "description": "Progress was made towards a broadcaster's charity campaign.",
      "type": "object",
      "properties": {
        "id": {
          "description": "An ID that identifies the charity campaign.",
          "type": "string"
        },
        "broadcaster_id": {
          "description": "An ID that identifies the broadcaster that's running the campaign.",
          "type": "string"
        },
        "broadcaster_login": {
          "description": "The broadcaster's login name.",
          "type": "string"
        },
        "broadcaster_name": {
          "description": "The broadcaster's display name.",
          "type": "string"
        },
        "charity_name": {
          "description": "The charity's name.",
          "type": "string"
        },
        "charity_description": {
          "description": "A description of the charity.",
          "type": "string"
        },
        "charity_logo": {
          "description": "A URL to an image of the charity's logo. The image's type is PNG and its size is 100px X 100px.",
          "type": "string"
        },
        "charity_website": {
          "description": "A URL to the charity's website.",
          "type": "string"
        },
        "current_amount": {
          "description": "An object that contains the current amount of donations that the campaign has received.",
          "type": "object",
          "properties": {
            "value": {
              "description": "The monetary amount. The amount is specified in the currency's minor unit. For example, the minor units for USD is cents, so if the amount is $5.50 USD, value is set to 550.",
              "type": "integer"
            },
            "decimal_places": {
              "description": "The number of decimal places used by the currency. For example, USD uses two decimal places. Use this number to translate value from minor units to major units by using the formula:\n\nvalue / 10^decimal_places",
              "type": "integer"
            },
            "currency": {
              "description": "The ISO-4217 three-letter currency code that identifies the type of currency in value.",
              "type": "string"
            }
          },
          "required": ["value", "decimal_places", "currency"]
        },
        "target_amount": {
          "description": "An object that contains the campaign's target fundraising goal.",
          "type": "object",
          "properties": {
            "value": {
              "description": "The monetary amount. The amount is specified in the currency's minor unit. For example, the minor units for USD is cents, so if the amount is $5.50 USD, value is set to 550.",
              "type": "integer"
            },
            "decimal_places": {
              "description": "The number of decimal places used by the currency. For example, USD uses two decimal places. Use this number to translate value from minor units to major units by using the formula:\n\nvalue / 10^decimal_places",
              "type": "integer"
            },
            "currency": {
              "description": "The ISO-4217 three-letter currency code that identifies the type of currency in value.",
              "type": "string"
            }
          },
          "required": ["value", "decimal_places", "currency"]
        }
      },
      "required": [
        "id",
        "broadcaster_id",
        "broadcaster_login",
        "broadcaster_name",
        "charity_name",
        "charity_description",
        "charity_logo",
        "charity_website",
        "current_amount",
        "target_amount"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Charity Campaign Progress request arguments",
      "description": "Required and optional query parameters for requesting a Charity Campaign Progress event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The ID of the broadcaster that you want to receive notifications about when their campaign makes progress or is updated.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Charity Campaign Stop",
    "name": "channel.charity_campaign.stop",
    "version": "1",
    "description": "Sends a notification when the broadcaster stops a charity campaign.",
    "scope_required": "channel:read:charity",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Charity Campaign Progress",
      "description": "Progress was made towards a broadcaster's charity campaign.",
      "type": "object",
      "properties": {
        "id": {
          "description": "An ID that identifies the charity campaign.",
          "type": "string"
        },
        "broadcaster_id": {
          "description": "An ID that identifies the broadcaster that's running the campaign.",
          "type": "string"
        },
        "broadcaster_login": {
          "description": "The broadcaster's login name.",
          "type": "string"
        },
        "broadcaster_name": {
          "description": "The broadcaster's display name.",
          "type": "string"
        },
        "charity_name": {
          "description": "The charity's name.",
          "type": "string"
        },
        "charity_description": {
          "description": "A description of the charity.",
          "type": "string"
        },
        "charity_logo": {
          "description": "A URL to an image of the charity's logo. The image's type is PNG and its size is 100px X 100px.",
          "type": "string"
        },
        "charity_website": {
          "description": "A URL to the charity's website.",
          "type": "string"
        },
        "current_amount": {
          "description": "An object that contains the final amount of donations that the campaign received.",
          "type": "object",
          "properties": {
            "value": {
              "description": "The monetary amount. The amount is specified in the currency's minor unit. For example, the minor units for USD is cents, so if the amount is $5.50 USD, value is set to 550.",
              "type": "integer"
            },
            "decimal_places": {
              "description": "The number of decimal places used by the currency. For example, USD uses two decimal places. Use this number to translate value from minor units to major units by using the formula:\n\nvalue / 10^decimal_places",
              "type": "integer"
            },
            "currency": {
              "description": "The ISO-4217 three-letter currency code that identifies the type of currency in value.",
              "type": "string"
            }
          },
          "required": ["value", "decimal_places", "currency"]
        },
        "target_amount": {
          "description": "An object that contains the campaign's target fundraising goal.",
          "type": "object",
          "properties": {
            "value": {
              "description": "The monetary amount. The amount is specified in the currency's minor unit. For example, the minor units for USD is cents, so if the amount is $5.50 USD, value is set to 550.",
              "type": "integer"
            },
            "decimal_places": {
              "description": "The number of decimal places used by the currency. For example, USD uses two decimal places. Use this number to translate value from minor units to major units by using the formula:\n\nvalue / 10^decimal_places",
              "type": "integer"
            },
            "currency": {
              "description": "The ISO-4217 three-letter currency code that identifies the type of currency in value.",
              "type": "string"
            }
          },
          "required": ["value", "decimal_places", "currency"]
        },
        "stopped_at": {
          "description": "The UTC timestamp (in RFC3339 format) of when the broadcaster stopped the campaign.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "broadcaster_id",
        "broadcaster_login",
        "broadcaster_name",
        "charity_name",
        "charity_description",
        "charity_logo",
        "charity_website",
        "current_amount",
        "target_amount",
        "stopped_at"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Charity Campaign Stop request arguments",
      "description": "Required and optional query parameters for requesting a Charity Campaign Stop event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The ID of the broadcaster that you want to receive notifications about when their campaign stops.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Goal Begin",
    "name": "channel.goal.begin",
    "version": "1",
    "description": "Get notified when a broadcaster begins a goal.",
    "scope_required": "channel:read:goals",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Goal Begin",
      "description": "Get notified when a broadcaster begins a goal.",
      "type": "object",
      "properties": {
        "id": {
          "description": "An ID that identifies this event.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "An ID that uniquely identifies the broadcaster.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The broadcasters user login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The broadcasters user display name.",
          "type": "string"
        },
        "type": {
          "description": "The type of goal. Can be follow, subscription, subscription_count, new_subscription, or new_subscription_count",
          "type": "string"
        },
        "description": {
          "description": "A description of the goal, if specified. The description may contain a maximum of 40 characters.",
          "type": "string"
        },
        "current_amount": {
          "description": "The goal's current value.",
          "type": "integer"
        },
        "target_amount": {
          "description": "The goal's target value. For example, if the broadcaster has 200 followers before creating the goal, and their goal is to double that number, this field is set to 400.",
          "type": "integer"
        },
        "started_at": {
          "description": "The UTC timestamp in RFC 3339 format, which indicates when the broadcaster created the goal.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "type",
        "description",
        "current_amount",
        "target_amount",
        "started_at"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Goal Begin request arguments",
      "description": "Required and optional query parameters for requesting a Goal Begin event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The ID of the broadcaster to get notified about. The ID must match the user_id in the OAuth access token.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Goal Progress",
    "name": "channel.goal.progress",
    "version": "1",
    "description": "Get notified when progress (either positive or negative) is made towards a broadcasters goal.",
    "scope_required": "channel:read:goals",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Goal Progress",
      "description": "Get notified when progress (either positive or negative) is made towards a broadcasters goal.",
      "type": "object",
      "properties": {
        "id": {
          "description": "An ID that identifies this event.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "An ID that uniquely identifies the broadcaster.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The broadcasters user login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The broadcasters user display name.",
          "type": "string"
        },
        "type": {
          "description": "The type of goal. Can be follow, subscription, subscription_count, new_subscription, or new_subscription_count",
          "type": "string"
        },
        "description": {
          "description": "A description of the goal, if specified. The description may contain a maximum of 40 characters.",
          "type": "string"
        },
        "current_amount": {
          "description": "The goal's current value.",
          "type": "integer"
        },
        "target_amount": {
          "description": "The goal's target value. For example, if the broadcaster has 200 followers before creating the goal, and their goal is to double that number, this field is set to 400.",
          "type": "integer"
        },
        "started_at": {
          "description": "The UTC timestamp in RFC 3339 format, which indicates when the broadcaster created the goal.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "type",
        "description",
        "current_amount",
        "target_amount",
        "started_at"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Goal Progress request arguments",
      "description": "Required and optional query parameters for requesting a Goal Progress event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The ID of the broadcaster to get notified about. The ID must match the user_id in the OAuth access token.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Goal End",
    "name": "channel.goal.end",
    "version": "1",
    "description": "Get notified when a broadcaster ends a goal.",
    "scope_required": "channel:read:goals",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Goal End",
      "description": "Get notified when a broadcaster ends a goal.",
      "type": "object",
      "properties": {
        "id": {
          "description": "An ID that identifies this event.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "An ID that uniquely identifies the broadcaster.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The broadcasters user login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The broadcasters user display name.",
          "type": "string"
        },
        "type": {
          "description": "The type of goal. Can be follow, subscription, subscription_count, new_subscription, or new_subscription_count",
          "type": "string"
        },
        "description": {
          "description": "A description of the goal, if specified. The description may contain a maximum of 40 characters.",
          "type": "string"
        },
        "is_achieved": {
          "description": "A Boolean value that indicates whether the broadcaster achieved their goal. Is true if the goal was achieved; otherwise, false.",
          "type": "boolean"
        },
        "current_amount": {
          "description": "The goal's current value.",
          "type": "integer"
        },
        "target_amount": {
          "description": "The goal's target value. For example, if the broadcaster has 200 followers before creating the goal, and their goal is to double that number, this field is set to 400.",
          "type": "integer"
        },
        "started_at": {
          "description": "The UTC timestamp in RFC 3339 format, which indicates when the broadcaster created the goal.",
          "type": "string"
        },
        "ended_at": {
          "description": "The UTC timestamp in RFC 3339 format, which indicates when the broadcaster ended the goal.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "type",
        "description",
        "is_achieved",
        "current_amount",
        "target_amount",
        "started_at",
        "ended_at"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Goal End request arguments",
      "description": "Required and optional query parameters for requesting a Goal End event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The ID of the broadcaster to get notified about. The ID must match the user_id in the OAuth access token.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Hype Train Begin",
    "name": "channel.hype_train.begin",
    "version": "1",
    "description": "A Hype Train begins on the specified channel.",
    "scope_required": "channel:read:hype_train",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Hype Train Begin",
      "description": "A Hype Train begins on the specified channel.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The Hype Train ID.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "The requested broadcaster ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The requested broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The requested broadcaster display name.",
          "type": "string"
        },
        "total": {
          "description": "Total points contributed to the Hype Train.",
          "type": "integer"
        },
        "progress": {
          "description": "The number of points contributed to the Hype Train at the current level.",
          "type": "integer"
        },
        "goal": {
          "description": "The number of points required to reach the next level.",
          "type": "integer"
        },
        "top_contributions": {
          "description": "The contributors with the most points contributed.",
          "type": "object",
          "properties": {
            "user_id": {
              "description": "The ID of the user.",
              "type": "string"
            },
            "user_login": {
              "description": "The login of the user.",
              "type": "string"
            },
            "user_name": {
              "description": "The display name of the user.",
              "type": "string"
            },
            "type": {
              "description": "Type of contribution. Valid values includebits,subscription.",
              "type": "string"
            },
            "total": {
              "description": "The total contributed.",
              "type": "integer"
            }
          },
          "required": ["user_id", "user_login", "user_name", "type", "total"]
        },
        "last_contribution": {
          "description": "The most recent contribution.",
          "type": "object",
          "properties": {
            "user_id": {
              "description": "The ID of the user.",
              "type": "string"
            },
            "user_login": {
              "description": "The login of the user.",
              "type": "string"
            },
            "user_name": {
              "description": "The display name of the user.",
              "type": "string"
            },
            "type": {
              "description": "Type of contribution. Valid values includebits,subscription.",
              "type": "string"
            },
            "total": {
              "description": "The total contributed.",
              "type": "integer"
            }
          },
          "required": ["user_id", "user_login", "user_name", "type", "total"]
        },
        "started_at": {
          "description": "The time when the Hype Train started.",
          "type": "string"
        },
        "expires_at": {
          "description": "The time when the Hype Train expires. The expiration is extended when the Hype Train reaches a new level.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "total",
        "progress",
        "goal",
        "top_contributions",
        "last_contribution",
        "started_at",
        "expires_at"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Hype Train Begin request arguments",
      "description": "Required and optional query parameters for requesting a Hype Train Begin event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID for the channel you want to Hype Train begin notifications for.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Hype Train Progress",
    "name": "channel.hype_train.progress",
    "version": "1",
    "description": "A Hype Train makes progress on the specified channel.",
    "scope_required": "channel:read:hype_train",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Hype Train Progress",
      "description": "A Hype Train makes progress on the specified channel.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The Hype Train ID.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "The requested broadcaster ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The requested broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The requested broadcaster display name.",
          "type": "string"
        },
        "level": {
          "description": "The current level of the Hype Train.",
          "type": "integer"
        },
        "total": {
          "description": "Total points contributed to the Hype Train.",
          "type": "integer"
        },
        "progress": {
          "description": "The number of points contributed to the Hype Train at the current level.",
          "type": "integer"
        },
        "goal": {
          "description": "The number of points required to reach the next level.",
          "type": "integer"
        },
        "top_contributions": {
          "description": "The contributors with the most points contributed.",
          "type": "object",
          "properties": {
            "user_id": {
              "description": "The ID of the user.",
              "type": "string"
            },
            "user_login": {
              "description": "The login of the user.",
              "type": "string"
            },
            "user_name": {
              "description": "The display name of the user.",
              "type": "string"
            },
            "type": {
              "description": "Type of contribution. Valid values includebits,subscription.",
              "type": "string"
            },
            "total": {
              "description": "The total contributed.",
              "type": "integer"
            }
          },
          "required": ["user_id", "user_login", "user_name", "type", "total"]
        },
        "last_contribution": {
          "description": "The most recent contribution.",
          "type": "object",
          "properties": {
            "user_id": {
              "description": "The ID of the user.",
              "type": "string"
            },
            "user_login": {
              "description": "The login of the user.",
              "type": "string"
            },
            "user_name": {
              "description": "The display name of the user.",
              "type": "string"
            },
            "type": {
              "description": "Type of contribution. Valid values includebits,subscription.",
              "type": "string"
            },
            "total": {
              "description": "The total contributed.",
              "type": "integer"
            }
          },
          "required": ["user_id", "user_login", "user_name", "type", "total"]
        },
        "started_at": {
          "description": "The time when the Hype Train started.",
          "type": "string"
        },
        "expires_at": {
          "description": "The time when the Hype Train expires. The expiration is extended when the Hype Train reaches a new level.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "level",
        "total",
        "progress",
        "goal",
        "top_contributions",
        "last_contribution",
        "started_at",
        "expires_at"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Hype Train Progress request arguments",
      "description": "Required and optional query parameters for requesting a Hype Train Progress event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID for the channel you want to Hype Train progress notifications for.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Hype Train End",
    "name": "channel.hype_train.end",
    "version": "1",
    "description": "A Hype Train ends on the specified channel.",
    "scope_required": "channel:read:hype_train",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Hype Train End",
      "description": "A Hype Train ends on the specified channel.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The Hype Train ID.",
          "type": "string"
        },
        "broadcaster_user_id": {
          "description": "The requested broadcaster ID.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The requested broadcaster login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The requested broadcaster display name.",
          "type": "string"
        },
        "level": {
          "description": "The current level of the Hype Train.",
          "type": "integer"
        },
        "total": {
          "description": "Total points contributed to the Hype Train.",
          "type": "integer"
        },
        "top_contributions": {
          "description": "The contributors with the most points contributed.",
          "type": "object",
          "properties": {
            "user_id": {
              "description": "The ID of the user.",
              "type": "string"
            },
            "user_login": {
              "description": "The login of the user.",
              "type": "string"
            },
            "user_name": {
              "description": "The display name of the user.",
              "type": "string"
            },
            "type": {
              "description": "Type of contribution. Valid values includebits,subscription.",
              "type": "string"
            },
            "total": {
              "description": "The total contributed.",
              "type": "integer"
            }
          },
          "required": ["user_id", "user_login", "user_name", "type", "total"]
        },
        "started_at": {
          "description": "The time when the Hype Train started.",
          "type": "string"
        },
        "ended_at": {
          "description": "The time when the Hype Train ended.",
          "type": "string"
        },
        "cooldown_ends_at": {
          "description": "The time when the Hype Train cooldown ends so that the next Hype Train can start.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "level",
        "total",
        "top_contributions",
        "started_at",
        "ended_at",
        "cooldown_ends_at"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Hype Train End request arguments",
      "description": "Required and optional query parameters for requesting a Hype Train End event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcaster user ID for the channel you want to Hype Train end notifications for.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id"]
    }
  },
  {
    "subscription_type": "Sheld Mode Begin",
    "name": "channel.shield_mode.begin",
    "version": "1",
    "description": "Sends a notification when the broadcaster activates Shield Mode.",
    "scope_required": "moderator:read:shield_mode",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Shield Mode Begin",
      "description": "Get notified when the broadcaster activates Shield Mode.",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcasters user id.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The broadcasters user login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The broadcasters user display name.",
          "type": "string"
        },
        "moderator_user_id": {
          "description": "An ID that identifies the moderator that updated the Shield Mode's status. If the broadcaster updated the status, this ID will be the same as broadcaster_user_id.",
          "type": "string"
        },
        "moderator_user_login": {
          "description": "The moderator's user login.",
          "type": "string"
        },
        "moderator_user_name": {
          "description": "The moderator's user display name.",
          "type": "string"
        },
        "started_at": {
          "description": "The UTC timestamp (in RFC3339 format) of when the moderator activated Shield Mode",
          "type": "string"
        }
      },
      "required": [
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "moderator_user_id",
        "moderator_user_login",
        "moderator_user_name",
        "started_at"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Shield Mode Begin request arguments",
      "description": "Required and optional query parameters for requesting a Shield Mode Begin event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The ID of the broadcaster that you want to receive notifications about when they activate Shield Mode.",
          "type": "string"
        },
        "moderator_user_id": {
          "description": "The ID of the broadcaster or one of the broadcaster's moderators.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id", "moderator_user_id"]
    }
  },
  {
    "subscription_type": "Sheld Mode End",
    "name": "channel.shield_mode.end",
    "version": "1",
    "description": "Sends a notification when the broadcaster deactivates Shield Mode.",
    "scope_required": "moderator:read:shield_mode",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Shield Mode End",
      "description": "Get notified when the broadcaster deactivates Shield Mode.",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The broadcasters user id.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The broadcasters user login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The broadcasters user display name.",
          "type": "string"
        },
        "moderator_user_id": {
          "description": "An ID that identifies the moderator that updated the Shield Mode's status. If the broadcaster updated the status, this ID will be the same as broadcaster_user_id.",
          "type": "string"
        },
        "moderator_user_login": {
          "description": "The moderator's user login.",
          "type": "string"
        },
        "moderator_user_name": {
          "description": "The moderator's user display name.",
          "type": "string"
        },
        "ended_at": {
          "description": "The UTC timestamp (in RFC3339 format) of when the moderator deactivated Shield Mode",
          "type": "string"
        }
      },
      "required": [
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "moderator_user_id",
        "moderator_user_login",
        "moderator_user_name",
        "ended_at"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Shield Mode End request arguments",
      "description": "Required and optional query parameters for requesting a Shield Mode End event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The ID of the broadcaster that you want to receive notifications about when they deactivate Shield Mode.",
          "type": "string"
        },
        "moderator_user_id": {
          "description": "The ID of the broadcaster or one of the broadcaster's moderators.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id", "moderator_user_id"]
    }
  },
  {
    "subscription_type": "Shoutout Create",
    "name": "channel.shoutout.create",
    "version": "1",
    "description": "Sends a notification when the specified broadcaster sends a Shoutout.",
    "scope_required": "moderator:read:shoutouts",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Shoutout Created",
      "description": "Get notified when the specified broadcaster sends a Shoutout.",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "An ID that identifies the broadcaster that sent the Shoutout.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The broadcasters user login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The broadcasters user display name.",
          "type": "string"
        },
        "to_broadcaster_user_id": {
          "description": "An ID that identifies the broadcaster that received the Shoutout.",
          "type": "string"
        },
        "to_broadcaster_user_login": {
          "description": "The broadcasters user login.",
          "type": "string"
        },
        "to_broadcaster_user_name": {
          "description": "The broadcasters user display name.",
          "type": "string"
        },
        "moderator_user_id": {
          "description": "An ID that identifies the moderator that sent the Shoutout. If the broadcaster sent the Shoutout, this ID is the same as the ID in broadcaster_user_id.",
          "type": "string"
        },
        "moderator_user_login": {
          "description": "The moderator's user login.",
          "type": "string"
        },
        "moderator_user_name": {
          "description": "The moderator's user display name.",
          "type": "string"
        },
        "viewer_count": {
          "description": "The number of users that were watching the broadcaster's stream at the time of the Shoutout.",
          "type": "integer"
        },
        "started_at": {
          "description": "The UTC timestamp (in RFC3339 format) of when the moderator sent the Shoutout.",
          "type": "string"
        },
        "cooldown_ends_at": {
          "description": "The UTC timestamp (in RFC3339 format) of when the broadcaster may send a Shoutout to a different broadcaster.",
          "type": "string"
        },
        "target_cooldown_ends_at": {
          "description": "The UTC timestamp (in RFC3339 format) of when the broadcaster may send another Shoutout to the broadcaster in to_broadcaster_user_id.",
          "type": "string"
        }
      },
      "required": [
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "to_broadcaster_user_id",
        "to_broadcaster_user_login",
        "to_broadcaster_user_name",
        "moderator_user_id",
        "moderator_user_login",
        "moderator_user_name",
        "viewer_count",
        "started_at",
        "cooldown_ends_at",
        "target_cooldown_ends_at"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Shoutout Create request arguments",
      "description": "Required and optional query parameters for requesting a Shoutout Create event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The ID of the broadcaster that you want to receive notifications about when they send a Shoutout.",
          "type": "string"
        },
        "moderator_user_id": {
          "description": "The ID of the broadcaster that gave the Shoutout or one of the broadcaster's moderators.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id", "moderator_user_id"]
    }
  },
  {
    "subscription_type": "Shoutout Received",
    "name": "channel.shoutout.receive",
    "version": "1",
    "description": "Sends a notification when the specified broadcaster receives a Shoutout.  NOTE Sent only if Twitch posts the Shoutout to the broadcaster's activity feed.",
    "scope_required": "moderator:read:shoutouts",
    "event_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Shoutout Received",
      "description": "Get notified when the specified broadcaster receives a Shoutout.",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "An ID that identifies the broadcaster that received the Shoutout.",
          "type": "string"
        },
        "broadcaster_user_login": {
          "description": "The broadcasters user login.",
          "type": "string"
        },
        "broadcaster_user_name": {
          "description": "The broadcasters user display name.",
          "type": "string"
        },
        "from_broadcaster_user_id": {
          "description": "An ID that identifies the broadcaster that sent the Shoutout.",
          "type": "string"
        },
        "from_broadcaster_user_login": {
          "description": "The broadcasters user login.",
          "type": "string"
        },
        "from_broadcaster_user_name": {
          "description": "The broadcasters user display name.",
          "type": "string"
        },
        "viewer_count": {
          "description": "The number of users that were watching the broadcaster's stream at the time of the Shoutout.",
          "type": "integer"
        },
        "started_at": {
          "description": "The UTC timestamp (in RFC3339 format) of when the moderator sent the Shoutout.",
          "type": "string"
        }
      },
      "required": [
        "broadcaster_user_id",
        "broadcaster_user_login",
        "broadcaster_user_name",
        "from_broadcaster_user_id",
        "from_broadcaster_user_login",
        "from_broadcaster_user_name",
        "viewer_count",
        "started_at"
      ]
    },
    "condition_schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": null,
      "title": "Shoutout Create request arguments",
      "description": "Required and optional query parameters for requesting a Shoutout Create event subscription",
      "type": "object",
      "properties": {
        "broadcaster_user_id": {
          "description": "The ID of the broadcaster that you want to receive notifications about when they send a Shoutout.",
          "type": "string"
        },
        "moderator_user_id": {
          "description": "The ID of the broadcaster that gave the Shoutout or one of the broadcaster's moderators.",
          "type": "string"
        }
      },
      "required": ["broadcaster_user_id", "moderator_user_id"]
    }
  }
]
